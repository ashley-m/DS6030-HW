---
title: "Homework #10: Density Estimation" 
author: "**Ashley Miller**"
format: ds6030hw-html
---

```{r config, include=FALSE}
# Set global configurations and settings here
knitr::opts_chunk$set()                 # set global chunk options
ggplot2::theme_set(ggplot2::theme_bw()) # set ggplot2 theme
```


# Required R packages and Directories {.unnumbered .unlisted}

```{r packages, message=FALSE, warning=FALSE}
data_dir = 'https://mdporter.github.io/teaching/data' # data directory
library(ks)        # functions for KDE
library(tidyverse) # functions for data manipulation   
```



# Problem 1 Geographic Profiling

Geographic profiling, a method developed in criminology, can be used to estimate the [home location (roost) of animals](https://www.sciencedirect.com/science/article/pii/S0022519305004157) based on a collection of sightings. The approach requires an estimate of the distribution the animal will travel from their roost to forage for food. 

A sample of $283$ distances that pipistrelle bats traveled (in meters) from their roost can be found at: 

- **Bat Data**: <`r file.path(data_dir, 'geo_profile.csv')`>

One probability model for the distance these bats will travel is:
\begin{align*}
f(x; \theta) = \frac{x}{\theta} \exp \left( - \frac{x^2}{2 \theta} \right)
\end{align*}
where the parameter $\theta > 0$ controls how far they are willing to travel. 


## a. Derive a closed-form expression for the MLE for $\theta$ (i.e., show the math). 

::: {.callout-note title="Solution"}
The probability density function is given by:

$$f(x; \theta) = \frac{x}{\theta} \exp \left( - \frac{x^2}{2 \theta} \right)$$
For a sample of n independent distances $(x_1, x_2, \ldots, x_n)$, the likelihood function $L(\theta)$ is:
$$L(\theta) = \prod_{i=1}^{n} \frac{x_i}{\theta} \exp \left( - \frac{x_i^2}{2 \theta} \right)$$
The log-likelihood function $\ell(\theta)$ is:
$$\ell(\theta) = \log L(\theta) = \sum_{i=1}^{n} \left( \log \left( \frac{x_i}{\theta} \right) - \frac{x_i^2}{2 \theta} \right)$$
Simplifying,
$$\ell(\theta) = \sum_{i=1}^{n} \left( \log(x_i) - \log(\theta) - \frac{x_i^2}{2 \theta} \right)$$
$$\ell(\theta) = \sum_{i=1}^{n} \log(x_i) - n \log(\theta) - \frac{1}{2 \theta} \sum_{i=1}^{n} x_i^2$$
To find the MLE, take the derivative of $\ell(\theta)$ with respect to $\theta$ and set it to zero:
$$\frac{d\ell(\theta)}{d\theta} = - \frac{n}{\theta} + \frac{1}{2 \theta^2} \sum_{i=1}^{n} x_i^2 = 0$$
$$- \frac{n}{\theta} + \frac{1}{2 \theta^2} \sum_{i=1}^{n} x_i^2 = 0$$
$$- n \theta + \frac{1}{2} \sum_{i=1}^{n} x_i^2 = 0$$
$$2 n \theta = \sum_{i=1}^{n} x_i^2$$
So, the MLE for $\theta$ is:
$$\hat{\theta} = \frac{1}{2n} \sum_{i=1}^{n} x_i^2$$
:::


## b. Estimate $\theta$ for the bat data using MLE? 

Calculate using the solution to part a, or use computational methods.

::: {.callout-note title="Solution"}
```{r}
bat <- read.csv("geo_profile.csv")
n <- nrow(bat)
theta_hat_cf <- sum(bat[,1]^2)/(2*n)
cat("Closed-form MLE for theta:", theta_hat_cf, "\n")
  
log_likelihood <- function(theta, data) {
    n <- length(data)
    sum_xi2 <- sum(data^2)
    ll<-sum(log(data))-n * log(theta) - (sum_xi2 / (2 * theta))
    return(ll)
}

initial_theta <- 1
result <- optim(par = initial_theta, fn = function(theta){
  -log_likelihood(theta, bat[,1])
  }, method = "L-BFGS-B", lower = 0.0001)
theta_hat <- result$par

cat("MLE for theta:", theta_hat, "\n")
```

:::

## c. Plot the estimated density

Using the MLE value of $\theta$ from part b, calculate the estimated density at a set of evaluation points between 0 and 8 meters. Plot the estimated density.

- The x-axis should be distance and y-axis should be density (pdf). 

::: {.callout-note title="Solution"}
```{r}
pdf_function <- function(x, theta) {
  return((x / theta) * exp(- x^2 / (2 * theta)))
}

distance <- seq(0, 8, length.out = 1000)
density <- pdf_function(distance, theta_hat)

fig <- data.frame(distance = distance, density = density) %>%
  ggplot(aes(x = distance, y = density)) + geom_line(color = "black") +
  geom_ribbon(aes(ymin = 0, ymax = density), fill = "black", alpha = 0.8) +
  labs(title = "PDF of Bat Migration", x = "Distance (m)", y = "Density")
show(fig)
```
:::

## d. Estimate the density using KDE. 

Report the bandwidth you selected and produce a plot of the estimated density. 

::: {.callout-note title="Solution"}
```{r}
library(ks)
bw <- .0666
f <- kde(bat[,1], h = bw)
kde_data <- data.frame(x = f$eval.points, density = f$estimate)

kde_data %>%
  ggplot(aes(x = x, y = density)) +
  geom_line(color = "black", linewidth = 1) +
  geom_ribbon(aes(ymin = 0, ymax = density), fill = "maroon", alpha = 0.4) +
  labs(title = "Kernel Density Estimate",
       x = "Distance (m)",
       y = "Density") +
  annotate("text", x = Inf, y = Inf, label = paste("Bandwidth:", bw), hjust = 3.2, vjust = 2, color = "maroon")

```
:::

## e. Which model do you prefer, the parametric or KDE? Why?

::: {.callout-note title="Solution"}
Personally, I like the KDE, but that is probably because I picked a small bandwidth and it is easier to see how the data affect the function. It also allows you to tune that bandwidth as a parameter to account for more uncertainty if you feel the estimate is not generalizable.
:::

# Problem 2: Interstate Crash Density

Interstate 64 (I-64) is a major east-west road that passes just south of Charlottesville. Where and when are the most dangerous places/times to be on I-64? The crash data (link below) gives the mile marker and fractional time-of-week for crashes that occurred on I-64 between mile marker 87 and 136 in 2016. The time-of-week data takes a numeric value of *\<dow\>.\<hour/24\>*, where the dow starts at 0 for Sunday (6 for Sat) and the decimal gives the time of day information. Thus `time=0.0417` corresponds to Sun at 1am and `time=6.5` corresponds to Sat at noon. 

- **Crash Data**: <`r file.path(data_dir, 'crashes16.csv')`>


## a. Crash Data

Extract the crashes and make a scatter plot with mile marker on x-axis and time on y-axis.

::: {.callout-note title="Solution"}
```{r}
crash <- read.csv("crashes16.csv")

crash %>%
  ggplot(aes(x = mile, y = time)) +
  geom_point() +
  geom_hline(yintercept = seq(0, 6, by = 1), color = "grey", linetype = "dashed") +
  scale_y_continuous(breaks = seq(0, 6, by = 1), labels = c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")) +
  labs(title = "Plot of Incidents on I-64", x = "Mile Marker", y = "Time of Week")
```
:::

## b. Use KDE to estimate the *mile marker* density. 

- Report the bandwidth. 
- Plot the density estimate.

::: {.callout-note title="Solution"}
```{r}
bw <- .664
f <- kde(crash$mile, h = bw)
kde_data <- data.frame(x = f$eval.points, density = f$estimate)

kde_data %>%
  ggplot(aes(x = x, y = density)) +
  geom_line(color = "red", linewidth = 1) +
  geom_ribbon(aes(ymin = 0, ymax = density), fill = "navy", alpha = 0.4) +
  labs(title = "Kernel Density Estimate",
       x = "Mile Marker",
       y = "Density") +
  annotate("text", x = Inf, y = Inf, label = paste("Bandwidth:", bw), hjust = 3.5, vjust = 2, color = "navy")
```

:::

## c. Use KDE to estimate the temporal *time-of-week* density. 

- Report the bandwidth. 
- Plot the density estimate. 

::: {.callout-note title="Solution"}
```{r}
bw <- 1/24 # 1hr bandwidth
f <- kde(crash$time, h = bw)
kde_data <- data.frame(x = f$eval.points, density = f$estimate)

kde_data %>%
  ggplot(aes(x = x, y = density)) +
  geom_line(color = "red", linewidth = 1) +
  geom_ribbon(aes(ymin = 0, ymax = density), fill = "navy", alpha = 0.4) +
  labs(title = "Kernel Density Estimate",
       x = "Time of Week",
       y = "Density") +
  annotate("text", x = Inf, y = Inf, label = paste("Bandwidth:", bw), hjust = 1.99, vjust = 2, color = "navy")
```

:::

## d. Use KDE to estimate the bivariate mile-time density. 

- Report the bandwidth parameters.
- Plot the bivariate density estimate. 

::: {.callout-note title="Solution"}
```{r}
#crash %>%
#  ggplot(aes(mile, time)) + geom_density2d_filled()

H1 = Hscv(crash)
f1 = kde(crash, H=H1)
```
```{r}
plot(f1,
     cont = c(10, 35, 50, 64, 95, 99), # set contour levels
     display = "filled.contour", # use filled contour
     las=1, xlim = c(75, 140), ylim=c(0, 7),
     ylab="",
     xlab="",
     yaxt="n")
points(crash, pch=19, cex=.5, col='grey60') # add points
grid() # add grid lines

# Add labels for days of the week 
days_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday") 
text(x = 83, y = seq(0.5, 6.5, by =1), labels = days_of_week, pos = 2, cex = 0.8, col = "maroon")

print(paste("Bandwidth (mile):", round(H1[1, 1], 2)))
print(paste("Bandwidth (time):", round(H1[2, 2], 2)))
print(paste("Cross-bandwidth (mile, time):", round(H1[1, 2], 2)))

title(main = "Incidents on I-64", xlab = "Mile Marker", ylab = "Time of Week")
```

:::

## e. Crash Hotspot

Based on the estimated density, approximate the most dangerous place and time to drive on this stretch of road. Identify the mile marker and time-of-week pair (within a few miles and hours).

::: {.callout-note title="Solution"}
```{r}
eval_points <- f1$eval.points  # The grid of evaluation points
densities <- f1$estimate  # The density estimates at those points

convert_time <- function(time) 
  { 
  day_of_week <- c("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday") 
  day <- day_of_week[floor(time) + 1] 
  fraction_of_day <- time %% 1
  hours <- round(fraction_of_day * 24)
  if (hours == 24) { 
    hours <- 0 
    day <- day_of_week[(floor(time) + 2) %% 7 + 1] }
  # Move to the next day
  military_time<- sprintf("%02d:00", hours)
  return(paste(day, military_time))
}

max_density_index <- which(densities == max(densities), arr.ind = TRUE)

highest_density_mile <- eval_points[[1]][max_density_index[1]]
highest_density_time <- eval_points[[2]][max_density_index[2]]

cat("The highest density mile-time pair is:\n")
cat("Mile:", round(highest_density_mile), "\n")
cat("Time:", convert_time(highest_density_time), "\n")
```
:::

